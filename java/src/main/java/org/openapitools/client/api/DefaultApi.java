/*
 * app.salesflare.com
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.TasksGet200ResponseInner;
import org.openapitools.client.model.TasksPost200Response;
import org.openapitools.client.model.V1MPost200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for messengerWebMetricsPost
     * @param appId  (required)
     * @param v  (required)
     * @param g  (required)
     * @param s  (required)
     * @param r  (required)
     * @param platform  (required)
     * @param installationType  (required)
     * @param idempotencyKey  (required)
     * @param internal  (required)
     * @param isIntersectionBooted  (required)
     * @param pageTitle  (required)
     * @param userActiveCompanyId  (required)
     * @param metrics  (required)
     * @param logs  (required)
     * @param opMetrics  (required)
     * @param hcMetrics  (required)
     * @param referer  (required)
     * @param anonymousSession  (required)
     * @param deviceIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * status -  <br>  * x-ami-version -  <br>  * x-content-type-options -  <br>  * x-intercom-version -  <br>  * x-request-queueing -  <br>  * x-runtime -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call messengerWebMetricsPostCall(String appId, String v, String g, String s, String r, String platform, String installationType, String idempotencyKey, String internal, String isIntersectionBooted, String pageTitle, String userActiveCompanyId, String metrics, String logs, String opMetrics, String hcMetrics, String referer, String anonymousSession, String deviceIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messenger/web/metrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarFormParams.put("app_id", appId);
        }

        if (v != null) {
            localVarFormParams.put("v", v);
        }

        if (g != null) {
            localVarFormParams.put("g", g);
        }

        if (s != null) {
            localVarFormParams.put("s", s);
        }

        if (r != null) {
            localVarFormParams.put("r", r);
        }

        if (platform != null) {
            localVarFormParams.put("platform", platform);
        }

        if (installationType != null) {
            localVarFormParams.put("installation_type", installationType);
        }

        if (idempotencyKey != null) {
            localVarFormParams.put("Idempotency-Key", idempotencyKey);
        }

        if (internal != null) {
            localVarFormParams.put("internal", internal);
        }

        if (isIntersectionBooted != null) {
            localVarFormParams.put("is_intersection_booted", isIntersectionBooted);
        }

        if (pageTitle != null) {
            localVarFormParams.put("page_title", pageTitle);
        }

        if (userActiveCompanyId != null) {
            localVarFormParams.put("user_active_company_id", userActiveCompanyId);
        }

        if (metrics != null) {
            localVarFormParams.put("metrics", metrics);
        }

        if (logs != null) {
            localVarFormParams.put("logs", logs);
        }

        if (opMetrics != null) {
            localVarFormParams.put("op_metrics", opMetrics);
        }

        if (hcMetrics != null) {
            localVarFormParams.put("hc_metrics", hcMetrics);
        }

        if (referer != null) {
            localVarFormParams.put("referer", referer);
        }

        if (anonymousSession != null) {
            localVarFormParams.put("anonymous_session", anonymousSession);
        }

        if (deviceIdentifier != null) {
            localVarFormParams.put("device_identifier", deviceIdentifier);
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call messengerWebMetricsPostValidateBeforeCall(String appId, String v, String g, String s, String r, String platform, String installationType, String idempotencyKey, String internal, String isIntersectionBooted, String pageTitle, String userActiveCompanyId, String metrics, String logs, String opMetrics, String hcMetrics, String referer, String anonymousSession, String deviceIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling messengerWebMetricsPost(Async)");
        }

        // verify the required parameter 'v' is set
        if (v == null) {
            throw new ApiException("Missing the required parameter 'v' when calling messengerWebMetricsPost(Async)");
        }

        // verify the required parameter 'g' is set
        if (g == null) {
            throw new ApiException("Missing the required parameter 'g' when calling messengerWebMetricsPost(Async)");
        }

        // verify the required parameter 's' is set
        if (s == null) {
            throw new ApiException("Missing the required parameter 's' when calling messengerWebMetricsPost(Async)");
        }

        // verify the required parameter 'r' is set
        if (r == null) {
            throw new ApiException("Missing the required parameter 'r' when calling messengerWebMetricsPost(Async)");
        }

        // verify the required parameter 'platform' is set
        if (platform == null) {
            throw new ApiException("Missing the required parameter 'platform' when calling messengerWebMetricsPost(Async)");
        }

        // verify the required parameter 'installationType' is set
        if (installationType == null) {
            throw new ApiException("Missing the required parameter 'installationType' when calling messengerWebMetricsPost(Async)");
        }

        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling messengerWebMetricsPost(Async)");
        }

        // verify the required parameter 'internal' is set
        if (internal == null) {
            throw new ApiException("Missing the required parameter 'internal' when calling messengerWebMetricsPost(Async)");
        }

        // verify the required parameter 'isIntersectionBooted' is set
        if (isIntersectionBooted == null) {
            throw new ApiException("Missing the required parameter 'isIntersectionBooted' when calling messengerWebMetricsPost(Async)");
        }

        // verify the required parameter 'pageTitle' is set
        if (pageTitle == null) {
            throw new ApiException("Missing the required parameter 'pageTitle' when calling messengerWebMetricsPost(Async)");
        }

        // verify the required parameter 'userActiveCompanyId' is set
        if (userActiveCompanyId == null) {
            throw new ApiException("Missing the required parameter 'userActiveCompanyId' when calling messengerWebMetricsPost(Async)");
        }

        // verify the required parameter 'metrics' is set
        if (metrics == null) {
            throw new ApiException("Missing the required parameter 'metrics' when calling messengerWebMetricsPost(Async)");
        }

        // verify the required parameter 'logs' is set
        if (logs == null) {
            throw new ApiException("Missing the required parameter 'logs' when calling messengerWebMetricsPost(Async)");
        }

        // verify the required parameter 'opMetrics' is set
        if (opMetrics == null) {
            throw new ApiException("Missing the required parameter 'opMetrics' when calling messengerWebMetricsPost(Async)");
        }

        // verify the required parameter 'hcMetrics' is set
        if (hcMetrics == null) {
            throw new ApiException("Missing the required parameter 'hcMetrics' when calling messengerWebMetricsPost(Async)");
        }

        // verify the required parameter 'referer' is set
        if (referer == null) {
            throw new ApiException("Missing the required parameter 'referer' when calling messengerWebMetricsPost(Async)");
        }

        // verify the required parameter 'anonymousSession' is set
        if (anonymousSession == null) {
            throw new ApiException("Missing the required parameter 'anonymousSession' when calling messengerWebMetricsPost(Async)");
        }

        // verify the required parameter 'deviceIdentifier' is set
        if (deviceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'deviceIdentifier' when calling messengerWebMetricsPost(Async)");
        }

        return messengerWebMetricsPostCall(appId, v, g, s, r, platform, installationType, idempotencyKey, internal, isIntersectionBooted, pageTitle, userActiveCompanyId, metrics, logs, opMetrics, hcMetrics, referer, anonymousSession, deviceIdentifier, _callback);

    }

    /**
     * /messenger/web/metrics
     * **Host**: http://api-iam.intercom.io
     * @param appId  (required)
     * @param v  (required)
     * @param g  (required)
     * @param s  (required)
     * @param r  (required)
     * @param platform  (required)
     * @param installationType  (required)
     * @param idempotencyKey  (required)
     * @param internal  (required)
     * @param isIntersectionBooted  (required)
     * @param pageTitle  (required)
     * @param userActiveCompanyId  (required)
     * @param metrics  (required)
     * @param logs  (required)
     * @param opMetrics  (required)
     * @param hcMetrics  (required)
     * @param referer  (required)
     * @param anonymousSession  (required)
     * @param deviceIdentifier  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * status -  <br>  * x-ami-version -  <br>  * x-content-type-options -  <br>  * x-intercom-version -  <br>  * x-request-queueing -  <br>  * x-runtime -  <br>  </td></tr>
     </table>
     */
    public void messengerWebMetricsPost(String appId, String v, String g, String s, String r, String platform, String installationType, String idempotencyKey, String internal, String isIntersectionBooted, String pageTitle, String userActiveCompanyId, String metrics, String logs, String opMetrics, String hcMetrics, String referer, String anonymousSession, String deviceIdentifier) throws ApiException {
        messengerWebMetricsPostWithHttpInfo(appId, v, g, s, r, platform, installationType, idempotencyKey, internal, isIntersectionBooted, pageTitle, userActiveCompanyId, metrics, logs, opMetrics, hcMetrics, referer, anonymousSession, deviceIdentifier);
    }

    /**
     * /messenger/web/metrics
     * **Host**: http://api-iam.intercom.io
     * @param appId  (required)
     * @param v  (required)
     * @param g  (required)
     * @param s  (required)
     * @param r  (required)
     * @param platform  (required)
     * @param installationType  (required)
     * @param idempotencyKey  (required)
     * @param internal  (required)
     * @param isIntersectionBooted  (required)
     * @param pageTitle  (required)
     * @param userActiveCompanyId  (required)
     * @param metrics  (required)
     * @param logs  (required)
     * @param opMetrics  (required)
     * @param hcMetrics  (required)
     * @param referer  (required)
     * @param anonymousSession  (required)
     * @param deviceIdentifier  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * status -  <br>  * x-ami-version -  <br>  * x-content-type-options -  <br>  * x-intercom-version -  <br>  * x-request-queueing -  <br>  * x-runtime -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> messengerWebMetricsPostWithHttpInfo(String appId, String v, String g, String s, String r, String platform, String installationType, String idempotencyKey, String internal, String isIntersectionBooted, String pageTitle, String userActiveCompanyId, String metrics, String logs, String opMetrics, String hcMetrics, String referer, String anonymousSession, String deviceIdentifier) throws ApiException {
        okhttp3.Call localVarCall = messengerWebMetricsPostValidateBeforeCall(appId, v, g, s, r, platform, installationType, idempotencyKey, internal, isIntersectionBooted, pageTitle, userActiveCompanyId, metrics, logs, opMetrics, hcMetrics, referer, anonymousSession, deviceIdentifier, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * /messenger/web/metrics (asynchronously)
     * **Host**: http://api-iam.intercom.io
     * @param appId  (required)
     * @param v  (required)
     * @param g  (required)
     * @param s  (required)
     * @param r  (required)
     * @param platform  (required)
     * @param installationType  (required)
     * @param idempotencyKey  (required)
     * @param internal  (required)
     * @param isIntersectionBooted  (required)
     * @param pageTitle  (required)
     * @param userActiveCompanyId  (required)
     * @param metrics  (required)
     * @param logs  (required)
     * @param opMetrics  (required)
     * @param hcMetrics  (required)
     * @param referer  (required)
     * @param anonymousSession  (required)
     * @param deviceIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * status -  <br>  * x-ami-version -  <br>  * x-content-type-options -  <br>  * x-intercom-version -  <br>  * x-request-queueing -  <br>  * x-runtime -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call messengerWebMetricsPostAsync(String appId, String v, String g, String s, String r, String platform, String installationType, String idempotencyKey, String internal, String isIntersectionBooted, String pageTitle, String userActiveCompanyId, String metrics, String logs, String opMetrics, String hcMetrics, String referer, String anonymousSession, String deviceIdentifier, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = messengerWebMetricsPostValidateBeforeCall(appId, v, g, s, r, platform, installationType, idempotencyKey, internal, isIntersectionBooted, pageTitle, userActiveCompanyId, metrics, logs, opMetrics, hcMetrics, referer, anonymousSession, deviceIdentifier, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksGet
     * @param limit  (optional)
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGetCall(String limit, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey cookie  hjsessionuser 374224", "apikey cookie  gid", "apikey cookie  hjsession 374224", "apikey cookie ajs user id", "apikey cookie intercom-id-nhqftro2", "apikey cookie intercom-session-nhqftro2", "apikey cookie intercom-device-id-nhqftro2", "apikey cookie salesflare-session", "apikey cookie ajs anonymous id", "apikey header cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksGetValidateBeforeCall(String limit, String q, final ApiCallback _callback) throws ApiException {
        return tasksGetCall(limit, q, _callback);

    }

    /**
     * /tasks
     * **Host**: http://api.salesflare.com
     * @param limit  (optional)
     * @param q  (optional)
     * @return List&lt;TasksGet200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<TasksGet200ResponseInner> tasksGet(String limit, String q) throws ApiException {
        ApiResponse<List<TasksGet200ResponseInner>> localVarResp = tasksGetWithHttpInfo(limit, q);
        return localVarResp.getData();
    }

    /**
     * /tasks
     * **Host**: http://api.salesflare.com
     * @param limit  (optional)
     * @param q  (optional)
     * @return ApiResponse&lt;List&lt;TasksGet200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TasksGet200ResponseInner>> tasksGetWithHttpInfo(String limit, String q) throws ApiException {
        okhttp3.Call localVarCall = tasksGetValidateBeforeCall(limit, q, null);
        Type localVarReturnType = new TypeToken<List<TasksGet200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /tasks (asynchronously)
     * **Host**: http://api.salesflare.com
     * @param limit  (optional)
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGetAsync(String limit, String q, final ApiCallback<List<TasksGet200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksGetValidateBeforeCall(limit, q, _callback);
        Type localVarReturnType = new TypeToken<List<TasksGet200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * x-cloud-trace-context -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call tasksPostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey cookie  hjsessionuser 374224", "apikey cookie  gid", "apikey cookie  hjsession 374224", "apikey cookie ajs user id", "apikey cookie intercom-id-nhqftro2", "apikey cookie intercom-session-nhqftro2", "apikey cookie intercom-device-id-nhqftro2", "apikey cookie salesflare-session", "apikey cookie ajs anonymous id", "apikey header cookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return tasksPostCall(_callback);

    }

    /**
     * /tasks
     * **Host**: http://api.salesflare.com
     * @return TasksPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * x-cloud-trace-context -  <br>  </td></tr>
     </table>
     */
    public TasksPost200Response tasksPost() throws ApiException {
        ApiResponse<TasksPost200Response> localVarResp = tasksPostWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * /tasks
     * **Host**: http://api.salesflare.com
     * @return ApiResponse&lt;TasksPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * x-cloud-trace-context -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<TasksPost200Response> tasksPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = tasksPostValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TasksPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /tasks (asynchronously)
     * **Host**: http://api.salesflare.com
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * x-cloud-trace-context -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call tasksPostAsync(final ApiCallback<TasksPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksPostValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TasksPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MPostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/m";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v1MPostCall(_callback);

    }

    /**
     * /v1/m
     * **Host**: http://api.segment.io
     * @return V1MPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public V1MPost200Response v1MPost() throws ApiException {
        ApiResponse<V1MPost200Response> localVarResp = v1MPostWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * /v1/m
     * **Host**: http://api.segment.io
     * @return ApiResponse&lt;V1MPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1MPost200Response> v1MPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1MPostValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<V1MPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v1/m (asynchronously)
     * **Host**: http://api.segment.io
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MPostAsync(final ApiCallback<V1MPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MPostValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<V1MPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
