# coding: utf-8

"""
    app.salesflare.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from salesflare.models.tasks_get200_response_inner_account import TasksGet200ResponseInnerAccount
from salesflare.models.tasks_get200_response_inner_assignees_inner import TasksGet200ResponseInnerAssigneesInner
from salesflare.models.tasks_get200_response_inner_email import TasksGet200ResponseInnerEmail
from typing import Optional, Set
from typing_extensions import Self

class TasksGet200ResponseInner(BaseModel):
    """
    TasksGet200ResponseInner
    """ # noqa: E501
    id: StrictInt
    type: StrictStr
    account: TasksGet200ResponseInnerAccount
    creator: Optional[StrictInt]
    description: StrictStr
    reminder_date: StrictStr
    email: TasksGet200ResponseInnerEmail
    company: Optional[Any]
    meeting: Optional[Any]
    completed: StrictBool
    completion_date: Optional[Any]
    completor: Optional[Any]
    archived: StrictBool
    archive_date: Optional[Any]
    archivor: Optional[Any]
    last_modified_by: Optional[StrictInt]
    creation_date: StrictStr
    modification_date: StrictStr
    assignees: List[TasksGet200ResponseInnerAssigneesInner]
    can_edit: StrictBool
    __properties: ClassVar[List[str]] = ["id", "type", "account", "creator", "description", "reminder_date", "email", "company", "meeting", "completed", "completion_date", "completor", "archived", "archive_date", "archivor", "last_modified_by", "creation_date", "modification_date", "assignees", "can_edit"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TasksGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email
        if self.email:
            _dict['email'] = self.email.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in assignees (list)
        _items = []
        if self.assignees:
            for _item in self.assignees:
                if _item:
                    _items.append(_item.to_dict())
            _dict['assignees'] = _items
        # set to None if creator (nullable) is None
        # and model_fields_set contains the field
        if self.creator is None and "creator" in self.model_fields_set:
            _dict['creator'] = None

        # set to None if company (nullable) is None
        # and model_fields_set contains the field
        if self.company is None and "company" in self.model_fields_set:
            _dict['company'] = None

        # set to None if meeting (nullable) is None
        # and model_fields_set contains the field
        if self.meeting is None and "meeting" in self.model_fields_set:
            _dict['meeting'] = None

        # set to None if completion_date (nullable) is None
        # and model_fields_set contains the field
        if self.completion_date is None and "completion_date" in self.model_fields_set:
            _dict['completion_date'] = None

        # set to None if completor (nullable) is None
        # and model_fields_set contains the field
        if self.completor is None and "completor" in self.model_fields_set:
            _dict['completor'] = None

        # set to None if archive_date (nullable) is None
        # and model_fields_set contains the field
        if self.archive_date is None and "archive_date" in self.model_fields_set:
            _dict['archive_date'] = None

        # set to None if archivor (nullable) is None
        # and model_fields_set contains the field
        if self.archivor is None and "archivor" in self.model_fields_set:
            _dict['archivor'] = None

        # set to None if last_modified_by (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_by is None and "last_modified_by" in self.model_fields_set:
            _dict['last_modified_by'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TasksGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "account": TasksGet200ResponseInnerAccount.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "creator": obj.get("creator"),
            "description": obj.get("description"),
            "reminder_date": obj.get("reminder_date"),
            "email": TasksGet200ResponseInnerEmail.from_dict(obj["email"]) if obj.get("email") is not None else None,
            "company": obj.get("company"),
            "meeting": obj.get("meeting"),
            "completed": obj.get("completed"),
            "completion_date": obj.get("completion_date"),
            "completor": obj.get("completor"),
            "archived": obj.get("archived"),
            "archive_date": obj.get("archive_date"),
            "archivor": obj.get("archivor"),
            "last_modified_by": obj.get("last_modified_by"),
            "creation_date": obj.get("creation_date"),
            "modification_date": obj.get("modification_date"),
            "assignees": [TasksGet200ResponseInnerAssigneesInner.from_dict(_item) for _item in obj["assignees"]] if obj.get("assignees") is not None else None,
            "can_edit": obj.get("can_edit")
        })
        return _obj


