/**
 * app.salesflare.com
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { TasksGet200ResponseInner } from '../model/tasksGet200ResponseInner';
import { TasksPost200Response } from '../model/tasksPost200Response';
import { V1MPost200Response } from '../model/v1MPost200Response';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'http://localhost';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DefaultApiApiKeys {
    apikey cookie  gid,
    apikey cookie  hjsessionuser 374224,
    apikey cookie ajs anonymous id,
    apikey cookie intercom-id-nhqftro2,
    apikey cookie intercom-device-id-nhqftro2,
    apikey cookie salesflare-session,
    apikey cookie ajs user id,
    apikey cookie  hjsession 374224,
    apikey cookie intercom-session-nhqftro2,
    apikey header cookie,
}

export class DefaultApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apikey cookie  gid': new ApiKeyAuth('cookie', '_gid'),
        'apikey cookie  hjsessionuser 374224': new ApiKeyAuth('cookie', '_hjsessionuser_374224'),
        'apikey cookie ajs anonymous id': new ApiKeyAuth('cookie', 'ajs_anonymous_id'),
        'apikey cookie intercom-id-nhqftro2': new ApiKeyAuth('cookie', 'intercom-id-nhqftro2'),
        'apikey cookie intercom-device-id-nhqftro2': new ApiKeyAuth('cookie', 'intercom-device-id-nhqftro2'),
        'apikey cookie salesflare-session': new ApiKeyAuth('cookie', 'salesflare-session'),
        'apikey cookie ajs user id': new ApiKeyAuth('cookie', 'ajs_user_id'),
        'apikey cookie  hjsession 374224': new ApiKeyAuth('cookie', '_hjsession_374224'),
        'apikey cookie intercom-session-nhqftro2': new ApiKeyAuth('cookie', 'intercom-session-nhqftro2'),
        'apikey header cookie': new ApiKeyAuth('header', 'COOKIE'),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: DefaultApiApiKeys, value: string) {
        (this.authentications as any)[DefaultApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * **Host**: http://api-iam.intercom.io
     * @summary /messenger/web/metrics
     * @param appId 
     * @param v 
     * @param g 
     * @param s 
     * @param r 
     * @param platform 
     * @param installationType 
     * @param idempotencyKey 
     * @param internal 
     * @param isIntersectionBooted 
     * @param pageTitle 
     * @param userActiveCompanyId 
     * @param metrics 
     * @param logs 
     * @param opMetrics 
     * @param hcMetrics 
     * @param referer 
     * @param anonymousSession 
     * @param deviceIdentifier 
     */
    public async messengerWebMetricsPost (appId: string, v: string, g: string, s: string, r: string, platform: string, installationType: string, idempotencyKey: string, internal: string, isIntersectionBooted: string, pageTitle: string, userActiveCompanyId: string, metrics: string, logs: string, opMetrics: string, hcMetrics: string, referer: string, anonymousSession: string, deviceIdentifier: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/messenger/web/metrics';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/html'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'appId' is not null or undefined
        if (appId === null || appId === undefined) {
            throw new Error('Required parameter appId was null or undefined when calling messengerWebMetricsPost.');
        }

        // verify required parameter 'v' is not null or undefined
        if (v === null || v === undefined) {
            throw new Error('Required parameter v was null or undefined when calling messengerWebMetricsPost.');
        }

        // verify required parameter 'g' is not null or undefined
        if (g === null || g === undefined) {
            throw new Error('Required parameter g was null or undefined when calling messengerWebMetricsPost.');
        }

        // verify required parameter 's' is not null or undefined
        if (s === null || s === undefined) {
            throw new Error('Required parameter s was null or undefined when calling messengerWebMetricsPost.');
        }

        // verify required parameter 'r' is not null or undefined
        if (r === null || r === undefined) {
            throw new Error('Required parameter r was null or undefined when calling messengerWebMetricsPost.');
        }

        // verify required parameter 'platform' is not null or undefined
        if (platform === null || platform === undefined) {
            throw new Error('Required parameter platform was null or undefined when calling messengerWebMetricsPost.');
        }

        // verify required parameter 'installationType' is not null or undefined
        if (installationType === null || installationType === undefined) {
            throw new Error('Required parameter installationType was null or undefined when calling messengerWebMetricsPost.');
        }

        // verify required parameter 'idempotencyKey' is not null or undefined
        if (idempotencyKey === null || idempotencyKey === undefined) {
            throw new Error('Required parameter idempotencyKey was null or undefined when calling messengerWebMetricsPost.');
        }

        // verify required parameter 'internal' is not null or undefined
        if (internal === null || internal === undefined) {
            throw new Error('Required parameter internal was null or undefined when calling messengerWebMetricsPost.');
        }

        // verify required parameter 'isIntersectionBooted' is not null or undefined
        if (isIntersectionBooted === null || isIntersectionBooted === undefined) {
            throw new Error('Required parameter isIntersectionBooted was null or undefined when calling messengerWebMetricsPost.');
        }

        // verify required parameter 'pageTitle' is not null or undefined
        if (pageTitle === null || pageTitle === undefined) {
            throw new Error('Required parameter pageTitle was null or undefined when calling messengerWebMetricsPost.');
        }

        // verify required parameter 'userActiveCompanyId' is not null or undefined
        if (userActiveCompanyId === null || userActiveCompanyId === undefined) {
            throw new Error('Required parameter userActiveCompanyId was null or undefined when calling messengerWebMetricsPost.');
        }

        // verify required parameter 'metrics' is not null or undefined
        if (metrics === null || metrics === undefined) {
            throw new Error('Required parameter metrics was null or undefined when calling messengerWebMetricsPost.');
        }

        // verify required parameter 'logs' is not null or undefined
        if (logs === null || logs === undefined) {
            throw new Error('Required parameter logs was null or undefined when calling messengerWebMetricsPost.');
        }

        // verify required parameter 'opMetrics' is not null or undefined
        if (opMetrics === null || opMetrics === undefined) {
            throw new Error('Required parameter opMetrics was null or undefined when calling messengerWebMetricsPost.');
        }

        // verify required parameter 'hcMetrics' is not null or undefined
        if (hcMetrics === null || hcMetrics === undefined) {
            throw new Error('Required parameter hcMetrics was null or undefined when calling messengerWebMetricsPost.');
        }

        // verify required parameter 'referer' is not null or undefined
        if (referer === null || referer === undefined) {
            throw new Error('Required parameter referer was null or undefined when calling messengerWebMetricsPost.');
        }

        // verify required parameter 'anonymousSession' is not null or undefined
        if (anonymousSession === null || anonymousSession === undefined) {
            throw new Error('Required parameter anonymousSession was null or undefined when calling messengerWebMetricsPost.');
        }

        // verify required parameter 'deviceIdentifier' is not null or undefined
        if (deviceIdentifier === null || deviceIdentifier === undefined) {
            throw new Error('Required parameter deviceIdentifier was null or undefined when calling messengerWebMetricsPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (appId !== undefined) {
            localVarFormParams['app_id'] = ObjectSerializer.serialize(appId, "string");
        }

        if (v !== undefined) {
            localVarFormParams['v'] = ObjectSerializer.serialize(v, "string");
        }

        if (g !== undefined) {
            localVarFormParams['g'] = ObjectSerializer.serialize(g, "string");
        }

        if (s !== undefined) {
            localVarFormParams['s'] = ObjectSerializer.serialize(s, "string");
        }

        if (r !== undefined) {
            localVarFormParams['r'] = ObjectSerializer.serialize(r, "string");
        }

        if (platform !== undefined) {
            localVarFormParams['platform'] = ObjectSerializer.serialize(platform, "string");
        }

        if (installationType !== undefined) {
            localVarFormParams['installation_type'] = ObjectSerializer.serialize(installationType, "string");
        }

        if (idempotencyKey !== undefined) {
            localVarFormParams['Idempotency-Key'] = ObjectSerializer.serialize(idempotencyKey, "string");
        }

        if (internal !== undefined) {
            localVarFormParams['internal'] = ObjectSerializer.serialize(internal, "string");
        }

        if (isIntersectionBooted !== undefined) {
            localVarFormParams['is_intersection_booted'] = ObjectSerializer.serialize(isIntersectionBooted, "string");
        }

        if (pageTitle !== undefined) {
            localVarFormParams['page_title'] = ObjectSerializer.serialize(pageTitle, "string");
        }

        if (userActiveCompanyId !== undefined) {
            localVarFormParams['user_active_company_id'] = ObjectSerializer.serialize(userActiveCompanyId, "string");
        }

        if (metrics !== undefined) {
            localVarFormParams['metrics'] = ObjectSerializer.serialize(metrics, "string");
        }

        if (logs !== undefined) {
            localVarFormParams['logs'] = ObjectSerializer.serialize(logs, "string");
        }

        if (opMetrics !== undefined) {
            localVarFormParams['op_metrics'] = ObjectSerializer.serialize(opMetrics, "string");
        }

        if (hcMetrics !== undefined) {
            localVarFormParams['hc_metrics'] = ObjectSerializer.serialize(hcMetrics, "string");
        }

        if (referer !== undefined) {
            localVarFormParams['referer'] = ObjectSerializer.serialize(referer, "string");
        }

        if (anonymousSession !== undefined) {
            localVarFormParams['anonymous_session'] = ObjectSerializer.serialize(anonymousSession, "string");
        }

        if (deviceIdentifier !== undefined) {
            localVarFormParams['device_identifier'] = ObjectSerializer.serialize(deviceIdentifier, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * **Host**: http://api.salesflare.com
     * @summary /tasks
     * @param limit 
     * @param q 
     */
    public async tasksGet (limit?: string, q?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<TasksGet200ResponseInner>;  }> {
        const localVarPath = this.basePath + '/tasks';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "string");
        }

        if (q !== undefined) {
            localVarQueryParameters['q'] = ObjectSerializer.serialize(q, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey cookie  hjsessionuser 374224.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey cookie  hjsessionuser 374224.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.apikey cookie  gid.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey cookie  gid.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.apikey cookie  hjsession 374224.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey cookie  hjsession 374224.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.apikey cookie ajs user id.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey cookie ajs user id.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.apikey cookie intercom-id-nhqftro2.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey cookie intercom-id-nhqftro2.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.apikey cookie intercom-session-nhqftro2.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey cookie intercom-session-nhqftro2.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.apikey cookie intercom-device-id-nhqftro2.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey cookie intercom-device-id-nhqftro2.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.apikey cookie salesflare-session.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey cookie salesflare-session.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.apikey cookie ajs anonymous id.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey cookie ajs anonymous id.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.apikey header cookie.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey header cookie.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<TasksGet200ResponseInner>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<TasksGet200ResponseInner>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * **Host**: http://api.salesflare.com
     * @summary /tasks
     */
    public async tasksPost (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TasksPost200Response;  }> {
        const localVarPath = this.basePath + '/tasks';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apikey cookie  hjsessionuser 374224.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey cookie  hjsessionuser 374224.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.apikey cookie  gid.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey cookie  gid.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.apikey cookie  hjsession 374224.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey cookie  hjsession 374224.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.apikey cookie ajs user id.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey cookie ajs user id.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.apikey cookie intercom-id-nhqftro2.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey cookie intercom-id-nhqftro2.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.apikey cookie intercom-session-nhqftro2.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey cookie intercom-session-nhqftro2.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.apikey cookie intercom-device-id-nhqftro2.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey cookie intercom-device-id-nhqftro2.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.apikey cookie salesflare-session.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey cookie salesflare-session.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.apikey cookie ajs anonymous id.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey cookie ajs anonymous id.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.apikey header cookie.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apikey header cookie.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TasksPost200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TasksPost200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * **Host**: http://api.segment.io
     * @summary /v1/m
     */
    public async v1MPost (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: V1MPost200Response;  }> {
        const localVarPath = this.basePath + '/v1/m';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: V1MPost200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "V1MPost200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
