//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DefaultAPI {

    /**
     /messenger/web/metrics
     
     - parameter appId: (form)  
     - parameter v: (form)  
     - parameter g: (form)  
     - parameter s: (form)  
     - parameter r: (form)  
     - parameter platform: (form)  
     - parameter installationType: (form)  
     - parameter idempotencyKey: (form)  
     - parameter _internal: (form)  
     - parameter isIntersectionBooted: (form)  
     - parameter pageTitle: (form)  
     - parameter userActiveCompanyId: (form)  
     - parameter metrics: (form)  
     - parameter logs: (form)  
     - parameter opMetrics: (form)  
     - parameter hcMetrics: (form)  
     - parameter referer: (form)  
     - parameter anonymousSession: (form)  
     - parameter deviceIdentifier: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func messengerWebMetricsPost(appId: String, v: String, g: String, s: String, r: String, platform: String, installationType: String, idempotencyKey: String, _internal: String, isIntersectionBooted: String, pageTitle: String, userActiveCompanyId: String, metrics: String, logs: String, opMetrics: String, hcMetrics: String, referer: String, anonymousSession: String, deviceIdentifier: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return messengerWebMetricsPostWithRequestBuilder(appId: appId, v: v, g: g, s: s, r: r, platform: platform, installationType: installationType, idempotencyKey: idempotencyKey, _internal: _internal, isIntersectionBooted: isIntersectionBooted, pageTitle: pageTitle, userActiveCompanyId: userActiveCompanyId, metrics: metrics, logs: logs, opMetrics: opMetrics, hcMetrics: hcMetrics, referer: referer, anonymousSession: anonymousSession, deviceIdentifier: deviceIdentifier).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     /messenger/web/metrics
     - POST /messenger/web/metrics
     - **Host**: http://api-iam.intercom.io
     - responseHeaders: [status(String), x-ami-version(String), x-content-type-options(String), x-intercom-version(String), x-request-queueing(String), x-runtime(String)]
     - parameter appId: (form)  
     - parameter v: (form)  
     - parameter g: (form)  
     - parameter s: (form)  
     - parameter r: (form)  
     - parameter platform: (form)  
     - parameter installationType: (form)  
     - parameter idempotencyKey: (form)  
     - parameter _internal: (form)  
     - parameter isIntersectionBooted: (form)  
     - parameter pageTitle: (form)  
     - parameter userActiveCompanyId: (form)  
     - parameter metrics: (form)  
     - parameter logs: (form)  
     - parameter opMetrics: (form)  
     - parameter hcMetrics: (form)  
     - parameter referer: (form)  
     - parameter anonymousSession: (form)  
     - parameter deviceIdentifier: (form)  
     - returns: RequestBuilder<Void> 
     */
    open class func messengerWebMetricsPostWithRequestBuilder(appId: String, v: String, g: String, s: String, r: String, platform: String, installationType: String, idempotencyKey: String, _internal: String, isIntersectionBooted: String, pageTitle: String, userActiveCompanyId: String, metrics: String, logs: String, opMetrics: String, hcMetrics: String, referer: String, anonymousSession: String, deviceIdentifier: String) -> RequestBuilder<Void> {
        let localVariablePath = "/messenger/web/metrics"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "app_id": appId.encodeToJSON(),
            "v": v.encodeToJSON(),
            "g": g.encodeToJSON(),
            "s": s.encodeToJSON(),
            "r": r.encodeToJSON(),
            "platform": platform.encodeToJSON(),
            "installation_type": installationType.encodeToJSON(),
            "Idempotency-Key": idempotencyKey.encodeToJSON(),
            "internal": _internal.encodeToJSON(),
            "is_intersection_booted": isIntersectionBooted.encodeToJSON(),
            "page_title": pageTitle.encodeToJSON(),
            "user_active_company_id": userActiveCompanyId.encodeToJSON(),
            "metrics": metrics.encodeToJSON(),
            "logs": logs.encodeToJSON(),
            "op_metrics": opMetrics.encodeToJSON(),
            "hc_metrics": hcMetrics.encodeToJSON(),
            "referer": referer.encodeToJSON(),
            "anonymous_session": anonymousSession.encodeToJSON(),
            "device_identifier": deviceIdentifier.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     /tasks
     
     - parameter limit: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tasksGet(limit: String? = nil, q: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TasksGet200ResponseInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return tasksGetWithRequestBuilder(limit: limit, q: q).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     /tasks
     - GET /tasks
     - **Host**: http://api.salesflare.com
     - API Key:
       - type: apiKey _hjsessionuser_374224 
       - name: apikey cookie  hjsessionuser 374224
     - API Key:
       - type: apiKey _gid 
       - name: apikey cookie  gid
     - API Key:
       - type: apiKey _hjsession_374224 
       - name: apikey cookie  hjsession 374224
     - API Key:
       - type: apiKey ajs_user_id 
       - name: apikey cookie ajs user id
     - API Key:
       - type: apiKey intercom-id-nhqftro2 
       - name: apikey cookie intercom-id-nhqftro2
     - API Key:
       - type: apiKey intercom-session-nhqftro2 
       - name: apikey cookie intercom-session-nhqftro2
     - API Key:
       - type: apiKey intercom-device-id-nhqftro2 
       - name: apikey cookie intercom-device-id-nhqftro2
     - API Key:
       - type: apiKey salesflare-session 
       - name: apikey cookie salesflare-session
     - API Key:
       - type: apiKey ajs_anonymous_id 
       - name: apikey cookie ajs anonymous id
     - API Key:
       - type: apiKey COOKIE (HEADER)
       - name: apikey header cookie
     - parameter limit: (query)  (optional)
     - parameter q: (query)  (optional)
     - returns: RequestBuilder<[TasksGet200ResponseInner]> 
     */
    open class func tasksGetWithRequestBuilder(limit: String? = nil, q: String? = nil) -> RequestBuilder<[TasksGet200ResponseInner]> {
        let localVariablePath = "/tasks"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "q": (wrappedValue: q?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TasksGet200ResponseInner]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     /tasks
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tasksPost(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TasksPost200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return tasksPostWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     /tasks
     - POST /tasks
     - **Host**: http://api.salesflare.com
     - API Key:
       - type: apiKey _hjsessionuser_374224 
       - name: apikey cookie  hjsessionuser 374224
     - API Key:
       - type: apiKey _gid 
       - name: apikey cookie  gid
     - API Key:
       - type: apiKey _hjsession_374224 
       - name: apikey cookie  hjsession 374224
     - API Key:
       - type: apiKey ajs_user_id 
       - name: apikey cookie ajs user id
     - API Key:
       - type: apiKey intercom-id-nhqftro2 
       - name: apikey cookie intercom-id-nhqftro2
     - API Key:
       - type: apiKey intercom-session-nhqftro2 
       - name: apikey cookie intercom-session-nhqftro2
     - API Key:
       - type: apiKey intercom-device-id-nhqftro2 
       - name: apikey cookie intercom-device-id-nhqftro2
     - API Key:
       - type: apiKey salesflare-session 
       - name: apikey cookie salesflare-session
     - API Key:
       - type: apiKey ajs_anonymous_id 
       - name: apikey cookie ajs anonymous id
     - API Key:
       - type: apiKey COOKIE (HEADER)
       - name: apikey header cookie
     - responseHeaders: [x-cloud-trace-context(String)]
     - returns: RequestBuilder<TasksPost200Response> 
     */
    open class func tasksPostWithRequestBuilder() -> RequestBuilder<TasksPost200Response> {
        let localVariablePath = "/tasks"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json;charset=UTF-8",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TasksPost200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     /v1/m
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1MPost(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: V1MPost200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return v1MPostWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     /v1/m
     - POST /v1/m
     - **Host**: http://api.segment.io
     - returns: RequestBuilder<V1MPost200Response> 
     */
    open class func v1MPostWithRequestBuilder() -> RequestBuilder<V1MPost200Response> {
        let localVariablePath = "/v1/m"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "text/plain",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<V1MPost200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
