<?php
/**
 * DefaultApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * app.salesflare.com
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'messengerWebMetricsPost' => [
            'application/x-www-form-urlencoded',
        ],
        'tasksGet' => [
            'application/json',
        ],
        'tasksPost' => [
            'application/json;charset=UTF-8',
        ],
        'v1MPost' => [
            'text/plain',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation messengerWebMetricsPost
     *
     * /messenger/web/metrics
     *
     * @param  string $app_id app_id (required)
     * @param  string $v v (required)
     * @param  string $g g (required)
     * @param  string $s s (required)
     * @param  string $r r (required)
     * @param  string $platform platform (required)
     * @param  string $installation_type installation_type (required)
     * @param  string $idempotency_key idempotency_key (required)
     * @param  string $internal internal (required)
     * @param  string $is_intersection_booted is_intersection_booted (required)
     * @param  string $page_title page_title (required)
     * @param  string $user_active_company_id user_active_company_id (required)
     * @param  string $metrics metrics (required)
     * @param  string $logs logs (required)
     * @param  string $op_metrics op_metrics (required)
     * @param  string $hc_metrics hc_metrics (required)
     * @param  string $referer referer (required)
     * @param  string $anonymous_session anonymous_session (required)
     * @param  string $device_identifier device_identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['messengerWebMetricsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function messengerWebMetricsPost($app_id, $v, $g, $s, $r, $platform, $installation_type, $idempotency_key, $internal, $is_intersection_booted, $page_title, $user_active_company_id, $metrics, $logs, $op_metrics, $hc_metrics, $referer, $anonymous_session, $device_identifier, string $contentType = self::contentTypes['messengerWebMetricsPost'][0])
    {
        $this->messengerWebMetricsPostWithHttpInfo($app_id, $v, $g, $s, $r, $platform, $installation_type, $idempotency_key, $internal, $is_intersection_booted, $page_title, $user_active_company_id, $metrics, $logs, $op_metrics, $hc_metrics, $referer, $anonymous_session, $device_identifier, $contentType);
    }

    /**
     * Operation messengerWebMetricsPostWithHttpInfo
     *
     * /messenger/web/metrics
     *
     * @param  string $app_id (required)
     * @param  string $v (required)
     * @param  string $g (required)
     * @param  string $s (required)
     * @param  string $r (required)
     * @param  string $platform (required)
     * @param  string $installation_type (required)
     * @param  string $idempotency_key (required)
     * @param  string $internal (required)
     * @param  string $is_intersection_booted (required)
     * @param  string $page_title (required)
     * @param  string $user_active_company_id (required)
     * @param  string $metrics (required)
     * @param  string $logs (required)
     * @param  string $op_metrics (required)
     * @param  string $hc_metrics (required)
     * @param  string $referer (required)
     * @param  string $anonymous_session (required)
     * @param  string $device_identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['messengerWebMetricsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function messengerWebMetricsPostWithHttpInfo($app_id, $v, $g, $s, $r, $platform, $installation_type, $idempotency_key, $internal, $is_intersection_booted, $page_title, $user_active_company_id, $metrics, $logs, $op_metrics, $hc_metrics, $referer, $anonymous_session, $device_identifier, string $contentType = self::contentTypes['messengerWebMetricsPost'][0])
    {
        $request = $this->messengerWebMetricsPostRequest($app_id, $v, $g, $s, $r, $platform, $installation_type, $idempotency_key, $internal, $is_intersection_booted, $page_title, $user_active_company_id, $metrics, $logs, $op_metrics, $hc_metrics, $referer, $anonymous_session, $device_identifier, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation messengerWebMetricsPostAsync
     *
     * /messenger/web/metrics
     *
     * @param  string $app_id (required)
     * @param  string $v (required)
     * @param  string $g (required)
     * @param  string $s (required)
     * @param  string $r (required)
     * @param  string $platform (required)
     * @param  string $installation_type (required)
     * @param  string $idempotency_key (required)
     * @param  string $internal (required)
     * @param  string $is_intersection_booted (required)
     * @param  string $page_title (required)
     * @param  string $user_active_company_id (required)
     * @param  string $metrics (required)
     * @param  string $logs (required)
     * @param  string $op_metrics (required)
     * @param  string $hc_metrics (required)
     * @param  string $referer (required)
     * @param  string $anonymous_session (required)
     * @param  string $device_identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['messengerWebMetricsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function messengerWebMetricsPostAsync($app_id, $v, $g, $s, $r, $platform, $installation_type, $idempotency_key, $internal, $is_intersection_booted, $page_title, $user_active_company_id, $metrics, $logs, $op_metrics, $hc_metrics, $referer, $anonymous_session, $device_identifier, string $contentType = self::contentTypes['messengerWebMetricsPost'][0])
    {
        return $this->messengerWebMetricsPostAsyncWithHttpInfo($app_id, $v, $g, $s, $r, $platform, $installation_type, $idempotency_key, $internal, $is_intersection_booted, $page_title, $user_active_company_id, $metrics, $logs, $op_metrics, $hc_metrics, $referer, $anonymous_session, $device_identifier, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation messengerWebMetricsPostAsyncWithHttpInfo
     *
     * /messenger/web/metrics
     *
     * @param  string $app_id (required)
     * @param  string $v (required)
     * @param  string $g (required)
     * @param  string $s (required)
     * @param  string $r (required)
     * @param  string $platform (required)
     * @param  string $installation_type (required)
     * @param  string $idempotency_key (required)
     * @param  string $internal (required)
     * @param  string $is_intersection_booted (required)
     * @param  string $page_title (required)
     * @param  string $user_active_company_id (required)
     * @param  string $metrics (required)
     * @param  string $logs (required)
     * @param  string $op_metrics (required)
     * @param  string $hc_metrics (required)
     * @param  string $referer (required)
     * @param  string $anonymous_session (required)
     * @param  string $device_identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['messengerWebMetricsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function messengerWebMetricsPostAsyncWithHttpInfo($app_id, $v, $g, $s, $r, $platform, $installation_type, $idempotency_key, $internal, $is_intersection_booted, $page_title, $user_active_company_id, $metrics, $logs, $op_metrics, $hc_metrics, $referer, $anonymous_session, $device_identifier, string $contentType = self::contentTypes['messengerWebMetricsPost'][0])
    {
        $returnType = '';
        $request = $this->messengerWebMetricsPostRequest($app_id, $v, $g, $s, $r, $platform, $installation_type, $idempotency_key, $internal, $is_intersection_booted, $page_title, $user_active_company_id, $metrics, $logs, $op_metrics, $hc_metrics, $referer, $anonymous_session, $device_identifier, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'messengerWebMetricsPost'
     *
     * @param  string $app_id (required)
     * @param  string $v (required)
     * @param  string $g (required)
     * @param  string $s (required)
     * @param  string $r (required)
     * @param  string $platform (required)
     * @param  string $installation_type (required)
     * @param  string $idempotency_key (required)
     * @param  string $internal (required)
     * @param  string $is_intersection_booted (required)
     * @param  string $page_title (required)
     * @param  string $user_active_company_id (required)
     * @param  string $metrics (required)
     * @param  string $logs (required)
     * @param  string $op_metrics (required)
     * @param  string $hc_metrics (required)
     * @param  string $referer (required)
     * @param  string $anonymous_session (required)
     * @param  string $device_identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['messengerWebMetricsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function messengerWebMetricsPostRequest($app_id, $v, $g, $s, $r, $platform, $installation_type, $idempotency_key, $internal, $is_intersection_booted, $page_title, $user_active_company_id, $metrics, $logs, $op_metrics, $hc_metrics, $referer, $anonymous_session, $device_identifier, string $contentType = self::contentTypes['messengerWebMetricsPost'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling messengerWebMetricsPost'
            );
        }

        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling messengerWebMetricsPost'
            );
        }

        // verify the required parameter 'g' is set
        if ($g === null || (is_array($g) && count($g) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $g when calling messengerWebMetricsPost'
            );
        }

        // verify the required parameter 's' is set
        if ($s === null || (is_array($s) && count($s) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $s when calling messengerWebMetricsPost'
            );
        }

        // verify the required parameter 'r' is set
        if ($r === null || (is_array($r) && count($r) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $r when calling messengerWebMetricsPost'
            );
        }

        // verify the required parameter 'platform' is set
        if ($platform === null || (is_array($platform) && count($platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling messengerWebMetricsPost'
            );
        }

        // verify the required parameter 'installation_type' is set
        if ($installation_type === null || (is_array($installation_type) && count($installation_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $installation_type when calling messengerWebMetricsPost'
            );
        }

        // verify the required parameter 'idempotency_key' is set
        if ($idempotency_key === null || (is_array($idempotency_key) && count($idempotency_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idempotency_key when calling messengerWebMetricsPost'
            );
        }

        // verify the required parameter 'internal' is set
        if ($internal === null || (is_array($internal) && count($internal) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $internal when calling messengerWebMetricsPost'
            );
        }

        // verify the required parameter 'is_intersection_booted' is set
        if ($is_intersection_booted === null || (is_array($is_intersection_booted) && count($is_intersection_booted) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_intersection_booted when calling messengerWebMetricsPost'
            );
        }

        // verify the required parameter 'page_title' is set
        if ($page_title === null || (is_array($page_title) && count($page_title) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_title when calling messengerWebMetricsPost'
            );
        }

        // verify the required parameter 'user_active_company_id' is set
        if ($user_active_company_id === null || (is_array($user_active_company_id) && count($user_active_company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_active_company_id when calling messengerWebMetricsPost'
            );
        }

        // verify the required parameter 'metrics' is set
        if ($metrics === null || (is_array($metrics) && count($metrics) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $metrics when calling messengerWebMetricsPost'
            );
        }

        // verify the required parameter 'logs' is set
        if ($logs === null || (is_array($logs) && count($logs) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $logs when calling messengerWebMetricsPost'
            );
        }

        // verify the required parameter 'op_metrics' is set
        if ($op_metrics === null || (is_array($op_metrics) && count($op_metrics) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $op_metrics when calling messengerWebMetricsPost'
            );
        }

        // verify the required parameter 'hc_metrics' is set
        if ($hc_metrics === null || (is_array($hc_metrics) && count($hc_metrics) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hc_metrics when calling messengerWebMetricsPost'
            );
        }

        // verify the required parameter 'referer' is set
        if ($referer === null || (is_array($referer) && count($referer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $referer when calling messengerWebMetricsPost'
            );
        }

        // verify the required parameter 'anonymous_session' is set
        if ($anonymous_session === null || (is_array($anonymous_session) && count($anonymous_session) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $anonymous_session when calling messengerWebMetricsPost'
            );
        }

        // verify the required parameter 'device_identifier' is set
        if ($device_identifier === null || (is_array($device_identifier) && count($device_identifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $device_identifier when calling messengerWebMetricsPost'
            );
        }


        $resourcePath = '/messenger/web/metrics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($app_id !== null) {
            $formParams['app_id'] = ObjectSerializer::toFormValue($app_id);
        }
        // form params
        if ($v !== null) {
            $formParams['v'] = ObjectSerializer::toFormValue($v);
        }
        // form params
        if ($g !== null) {
            $formParams['g'] = ObjectSerializer::toFormValue($g);
        }
        // form params
        if ($s !== null) {
            $formParams['s'] = ObjectSerializer::toFormValue($s);
        }
        // form params
        if ($r !== null) {
            $formParams['r'] = ObjectSerializer::toFormValue($r);
        }
        // form params
        if ($platform !== null) {
            $formParams['platform'] = ObjectSerializer::toFormValue($platform);
        }
        // form params
        if ($installation_type !== null) {
            $formParams['installation_type'] = ObjectSerializer::toFormValue($installation_type);
        }
        // form params
        if ($idempotency_key !== null) {
            $formParams['Idempotency-Key'] = ObjectSerializer::toFormValue($idempotency_key);
        }
        // form params
        if ($internal !== null) {
            $formParams['internal'] = ObjectSerializer::toFormValue($internal);
        }
        // form params
        if ($is_intersection_booted !== null) {
            $formParams['is_intersection_booted'] = ObjectSerializer::toFormValue($is_intersection_booted);
        }
        // form params
        if ($page_title !== null) {
            $formParams['page_title'] = ObjectSerializer::toFormValue($page_title);
        }
        // form params
        if ($user_active_company_id !== null) {
            $formParams['user_active_company_id'] = ObjectSerializer::toFormValue($user_active_company_id);
        }
        // form params
        if ($metrics !== null) {
            $formParams['metrics'] = ObjectSerializer::toFormValue($metrics);
        }
        // form params
        if ($logs !== null) {
            $formParams['logs'] = ObjectSerializer::toFormValue($logs);
        }
        // form params
        if ($op_metrics !== null) {
            $formParams['op_metrics'] = ObjectSerializer::toFormValue($op_metrics);
        }
        // form params
        if ($hc_metrics !== null) {
            $formParams['hc_metrics'] = ObjectSerializer::toFormValue($hc_metrics);
        }
        // form params
        if ($referer !== null) {
            $formParams['referer'] = ObjectSerializer::toFormValue($referer);
        }
        // form params
        if ($anonymous_session !== null) {
            $formParams['anonymous_session'] = ObjectSerializer::toFormValue($anonymous_session);
        }
        // form params
        if ($device_identifier !== null) {
            $formParams['device_identifier'] = ObjectSerializer::toFormValue($device_identifier);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tasksGet
     *
     * /tasks
     *
     * @param  string $limit limit (optional)
     * @param  string $q q (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tasksGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TasksGet200ResponseInner[]
     */
    public function tasksGet($limit = null, $q = null, string $contentType = self::contentTypes['tasksGet'][0])
    {
        list($response) = $this->tasksGetWithHttpInfo($limit, $q, $contentType);
        return $response;
    }

    /**
     * Operation tasksGetWithHttpInfo
     *
     * /tasks
     *
     * @param  string $limit (optional)
     * @param  string $q (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tasksGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TasksGet200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksGetWithHttpInfo($limit = null, $q = null, string $contentType = self::contentTypes['tasksGet'][0])
    {
        $request = $this->tasksGetRequest($limit, $q, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TasksGet200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TasksGet200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TasksGet200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TasksGet200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TasksGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tasksGetAsync
     *
     * /tasks
     *
     * @param  string $limit (optional)
     * @param  string $q (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tasksGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksGetAsync($limit = null, $q = null, string $contentType = self::contentTypes['tasksGet'][0])
    {
        return $this->tasksGetAsyncWithHttpInfo($limit, $q, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tasksGetAsyncWithHttpInfo
     *
     * /tasks
     *
     * @param  string $limit (optional)
     * @param  string $q (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tasksGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksGetAsyncWithHttpInfo($limit = null, $q = null, string $contentType = self::contentTypes['tasksGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TasksGet200ResponseInner[]';
        $request = $this->tasksGetRequest($limit, $q, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tasksGet'
     *
     * @param  string $limit (optional)
     * @param  string $q (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tasksGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tasksGetRequest($limit = null, $q = null, string $contentType = self::contentTypes['tasksGet'][0])
    {




        $resourcePath = '/tasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('_hjsessionuser_374224');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('_gid');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('_hjsession_374224');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ajs_user_id');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('intercom-id-nhqftro2');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('intercom-session-nhqftro2');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('intercom-device-id-nhqftro2');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('salesflare-session');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ajs_anonymous_id');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('COOKIE');
        if ($apiKey !== null) {
            $headers['COOKIE'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tasksPost
     *
     * /tasks
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tasksPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TasksPost200Response
     */
    public function tasksPost(string $contentType = self::contentTypes['tasksPost'][0])
    {
        list($response) = $this->tasksPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation tasksPostWithHttpInfo
     *
     * /tasks
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tasksPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TasksPost200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function tasksPostWithHttpInfo(string $contentType = self::contentTypes['tasksPost'][0])
    {
        $request = $this->tasksPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TasksPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TasksPost200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TasksPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TasksPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TasksPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tasksPostAsync
     *
     * /tasks
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tasksPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksPostAsync(string $contentType = self::contentTypes['tasksPost'][0])
    {
        return $this->tasksPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tasksPostAsyncWithHttpInfo
     *
     * /tasks
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tasksPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tasksPostAsyncWithHttpInfo(string $contentType = self::contentTypes['tasksPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TasksPost200Response';
        $request = $this->tasksPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tasksPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tasksPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tasksPostRequest(string $contentType = self::contentTypes['tasksPost'][0])
    {


        $resourcePath = '/tasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('_hjsessionuser_374224');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('_gid');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('_hjsession_374224');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ajs_user_id');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('intercom-id-nhqftro2');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('intercom-session-nhqftro2');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('intercom-device-id-nhqftro2');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('salesflare-session');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ajs_anonymous_id');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('COOKIE');
        if ($apiKey !== null) {
            $headers['COOKIE'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MPost
     *
     * /v1/m
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1MPost200Response
     */
    public function v1MPost(string $contentType = self::contentTypes['v1MPost'][0])
    {
        list($response) = $this->v1MPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation v1MPostWithHttpInfo
     *
     * /v1/m
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1MPost200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MPostWithHttpInfo(string $contentType = self::contentTypes['v1MPost'][0])
    {
        $request = $this->v1MPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\V1MPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\V1MPost200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\V1MPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\V1MPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1MPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MPostAsync
     *
     * /v1/m
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MPostAsync(string $contentType = self::contentTypes['v1MPost'][0])
    {
        return $this->v1MPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MPostAsyncWithHttpInfo
     *
     * /v1/m
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MPostAsyncWithHttpInfo(string $contentType = self::contentTypes['v1MPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\V1MPost200Response';
        $request = $this->v1MPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MPostRequest(string $contentType = self::contentTypes['v1MPost'][0])
    {


        $resourcePath = '/v1/m';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
