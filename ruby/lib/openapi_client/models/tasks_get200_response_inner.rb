=begin
#app.salesflare.com

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module OpenapiClient
  class TasksGet200ResponseInner
    attr_accessor :id

    attr_accessor :type

    attr_accessor :account

    attr_accessor :creator

    attr_accessor :description

    attr_accessor :reminder_date

    attr_accessor :email

    attr_accessor :company

    attr_accessor :meeting

    attr_accessor :completed

    attr_accessor :completion_date

    attr_accessor :completor

    attr_accessor :archived

    attr_accessor :archive_date

    attr_accessor :archivor

    attr_accessor :last_modified_by

    attr_accessor :creation_date

    attr_accessor :modification_date

    attr_accessor :assignees

    attr_accessor :can_edit

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'type' => :'type',
        :'account' => :'account',
        :'creator' => :'creator',
        :'description' => :'description',
        :'reminder_date' => :'reminder_date',
        :'email' => :'email',
        :'company' => :'company',
        :'meeting' => :'meeting',
        :'completed' => :'completed',
        :'completion_date' => :'completion_date',
        :'completor' => :'completor',
        :'archived' => :'archived',
        :'archive_date' => :'archive_date',
        :'archivor' => :'archivor',
        :'last_modified_by' => :'last_modified_by',
        :'creation_date' => :'creation_date',
        :'modification_date' => :'modification_date',
        :'assignees' => :'assignees',
        :'can_edit' => :'can_edit'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'type' => :'String',
        :'account' => :'TasksGet200ResponseInnerAccount',
        :'creator' => :'Integer',
        :'description' => :'String',
        :'reminder_date' => :'String',
        :'email' => :'TasksGet200ResponseInnerEmail',
        :'company' => :'Object',
        :'meeting' => :'Object',
        :'completed' => :'Boolean',
        :'completion_date' => :'Object',
        :'completor' => :'Object',
        :'archived' => :'Boolean',
        :'archive_date' => :'Object',
        :'archivor' => :'Object',
        :'last_modified_by' => :'Integer',
        :'creation_date' => :'String',
        :'modification_date' => :'String',
        :'assignees' => :'Array<TasksGet200ResponseInnerAssigneesInner>',
        :'can_edit' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'creator',
        :'company',
        :'meeting',
        :'completion_date',
        :'completor',
        :'archive_date',
        :'archivor',
        :'last_modified_by',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::TasksGet200ResponseInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::TasksGet200ResponseInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = nil
      end

      if attributes.key?(:'account')
        self.account = attributes[:'account']
      else
        self.account = nil
      end

      if attributes.key?(:'creator')
        self.creator = attributes[:'creator']
      else
        self.creator = nil
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      else
        self.description = nil
      end

      if attributes.key?(:'reminder_date')
        self.reminder_date = attributes[:'reminder_date']
      else
        self.reminder_date = nil
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      else
        self.email = nil
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      else
        self.company = nil
      end

      if attributes.key?(:'meeting')
        self.meeting = attributes[:'meeting']
      else
        self.meeting = nil
      end

      if attributes.key?(:'completed')
        self.completed = attributes[:'completed']
      else
        self.completed = nil
      end

      if attributes.key?(:'completion_date')
        self.completion_date = attributes[:'completion_date']
      else
        self.completion_date = nil
      end

      if attributes.key?(:'completor')
        self.completor = attributes[:'completor']
      else
        self.completor = nil
      end

      if attributes.key?(:'archived')
        self.archived = attributes[:'archived']
      else
        self.archived = nil
      end

      if attributes.key?(:'archive_date')
        self.archive_date = attributes[:'archive_date']
      else
        self.archive_date = nil
      end

      if attributes.key?(:'archivor')
        self.archivor = attributes[:'archivor']
      else
        self.archivor = nil
      end

      if attributes.key?(:'last_modified_by')
        self.last_modified_by = attributes[:'last_modified_by']
      else
        self.last_modified_by = nil
      end

      if attributes.key?(:'creation_date')
        self.creation_date = attributes[:'creation_date']
      else
        self.creation_date = nil
      end

      if attributes.key?(:'modification_date')
        self.modification_date = attributes[:'modification_date']
      else
        self.modification_date = nil
      end

      if attributes.key?(:'assignees')
        if (value = attributes[:'assignees']).is_a?(Array)
          self.assignees = value
        end
      else
        self.assignees = nil
      end

      if attributes.key?(:'can_edit')
        self.can_edit = attributes[:'can_edit']
      else
        self.can_edit = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @account.nil?
        invalid_properties.push('invalid value for "account", account cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @reminder_date.nil?
        invalid_properties.push('invalid value for "reminder_date", reminder_date cannot be nil.')
      end

      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      if @completed.nil?
        invalid_properties.push('invalid value for "completed", completed cannot be nil.')
      end

      if @archived.nil?
        invalid_properties.push('invalid value for "archived", archived cannot be nil.')
      end

      if @creation_date.nil?
        invalid_properties.push('invalid value for "creation_date", creation_date cannot be nil.')
      end

      if @modification_date.nil?
        invalid_properties.push('invalid value for "modification_date", modification_date cannot be nil.')
      end

      if @assignees.nil?
        invalid_properties.push('invalid value for "assignees", assignees cannot be nil.')
      end

      if @can_edit.nil?
        invalid_properties.push('invalid value for "can_edit", can_edit cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @type.nil?
      return false if @account.nil?
      return false if @description.nil?
      return false if @reminder_date.nil?
      return false if @email.nil?
      return false if @completed.nil?
      return false if @archived.nil?
      return false if @creation_date.nil?
      return false if @modification_date.nil?
      return false if @assignees.nil?
      return false if @can_edit.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          type == o.type &&
          account == o.account &&
          creator == o.creator &&
          description == o.description &&
          reminder_date == o.reminder_date &&
          email == o.email &&
          company == o.company &&
          meeting == o.meeting &&
          completed == o.completed &&
          completion_date == o.completion_date &&
          completor == o.completor &&
          archived == o.archived &&
          archive_date == o.archive_date &&
          archivor == o.archivor &&
          last_modified_by == o.last_modified_by &&
          creation_date == o.creation_date &&
          modification_date == o.modification_date &&
          assignees == o.assignees &&
          can_edit == o.can_edit
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, type, account, creator, description, reminder_date, email, company, meeting, completed, completion_date, completor, archived, archive_date, archivor, last_modified_by, creation_date, modification_date, assignees, can_edit].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
